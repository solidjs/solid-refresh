// Vitest Snapshot v1

exports[`vite > ExportDefaultDeclaration w/ FunctionExpression > should skip ExportDefaultDeclaration w/ FunctionExpression with @refresh reload 1`] = `
"// @refresh reload
export default function Foo() {
  return <h1>Foo</h1>;
}
if (import.meta.hot) {
  import.meta.hot.decline();
}"
`;

exports[`vite > ExportDefaultDeclaration w/ FunctionExpression > should skip ExportDefaultDeclaration w/ FunctionExpression with @refresh skip 1`] = `
"// @refresh skip
export default function Foo() {
  return <h1>Foo</h1>;
}"
`;

exports[`vite > ExportDefaultDeclaration w/ FunctionExpression > should skip ExportDefaultDeclaration w/ FunctionExpression with invalid Component name 1`] = `
"export default function foo() {
  return <h1>Foo</h1>;
}"
`;

exports[`vite > ExportDefaultDeclaration w/ FunctionExpression > should skip ExportDefaultDeclaration w/ FunctionExpression with valid Component name and >1 params 1`] = `
"export default function Foo(a, b) {
  return <h1>Foo</h1>;
}"
`;

exports[`vite > ExportDefaultDeclaration w/ FunctionExpression > should transform ExportDefaultDeclaration w/ FunctionExpression with @refresh granular 1`] = `
"import { $$component as _$$component } from \\"solid-refresh\\";
import { $$refresh as _$$refresh } from \\"solid-refresh\\";
import { $$registry as _$$registry } from \\"solid-refresh\\";
const _REGISTRY = _$$registry();
// @refresh granular
export default _$$component(_REGISTRY, \\"_Component$$Foo\\", function Foo() {
  return <h1>Foo</h1>;
}, {
  signature: \\"83fbb41\\"
});
if (import.meta.hot) {
  _$$refresh({
    type: \\"vite\\",
    hot: import.meta.hot
  }, _REGISTRY);
}"
`;

exports[`vite > ExportDefaultDeclaration w/ FunctionExpression > should transform ExportDefaultDeclaration w/ FunctionExpression with @refresh granular 2`] = `
"import { $$component as _$$component } from \\"solid-refresh\\";
import { $$refresh as _$$refresh } from \\"solid-refresh\\";
import { $$registry as _$$registry } from \\"solid-refresh\\";
const _REGISTRY = _$$registry();
// @refresh granular
const example = 'Foo';
export default _$$component(_REGISTRY, \\"_Component$$Foo\\", function Foo() {
  return <h1>{example}</h1>;
}, {
  signature: \\"c479f38e\\",
  dependencies: [example]
});
if (import.meta.hot) {
  _$$refresh({
    type: \\"vite\\",
    hot: import.meta.hot
  }, _REGISTRY);
}"
`;

exports[`vite > ExportDefaultDeclaration w/ FunctionExpression > should transform ExportDefaultDeclaration w/ FunctionExpression with @refresh granular 3`] = `
"import { $$component as _$$component } from \\"solid-refresh\\";
import { $$refresh as _$$refresh } from \\"solid-refresh\\";
import { $$registry as _$$registry } from \\"solid-refresh\\";
const _REGISTRY = _$$registry();
// @refresh granular
const Example = createContext();
export default _$$component(_REGISTRY, \\"_Component$$Foo\\", function Foo() {
  return <Example.Provider>Foo</Example.Provider>;
}, {
  signature: \\"f8fa9630\\",
  dependencies: [Example]
});
if (import.meta.hot) {
  _$$refresh({
    type: \\"vite\\",
    hot: import.meta.hot
  }, _REGISTRY);
}"
`;

exports[`vite > ExportDefaultDeclaration w/ FunctionExpression > should transform ExportDefaultDeclaration w/ FunctionExpression with valid Component name and params 1`] = `
"import { $$component as _$$component } from \\"solid-refresh\\";
import { $$refresh as _$$refresh } from \\"solid-refresh\\";
import { $$registry as _$$registry } from \\"solid-refresh\\";
const _REGISTRY = _$$registry();
export default _$$component(_REGISTRY, \\"_Component$$Foo\\", function Foo() {
  return <h1>Foo</h1>;
});
if (import.meta.hot) {
  _$$refresh({
    type: \\"vite\\",
    hot: import.meta.hot
  }, _REGISTRY);
}"
`;

exports[`vite > ExportDefaultDeclaration w/ FunctionExpression > should transform ExportDefaultDeclaration w/ FunctionExpression with valid Component name and params 2`] = `
"import { $$component as _$$component } from \\"solid-refresh\\";
import { $$refresh as _$$refresh } from \\"solid-refresh\\";
import { $$registry as _$$registry } from \\"solid-refresh\\";
const _REGISTRY = _$$registry();
export default _$$component(_REGISTRY, \\"_Component$$Foo\\", function Foo(props) {
  return <h1>Foo</h1>;
});
if (import.meta.hot) {
  _$$refresh({
    type: \\"vite\\",
    hot: import.meta.hot
  }, _REGISTRY);
}"
`;

exports[`vite > ExportNamedDeclaration w/ FunctionExpression > should skip ExportNamedDeclaration w/ FunctionExpression with @refresh reload 1`] = `
"// @refresh reload
export function Foo() {
  return <h1>Foo</h1>;
}
if (import.meta.hot) {
  import.meta.hot.decline();
}"
`;

exports[`vite > ExportNamedDeclaration w/ FunctionExpression > should skip ExportNamedDeclaration w/ FunctionExpression with @refresh skip 1`] = `
"// @refresh skip
export function Foo() {
  return <h1>Foo</h1>;
}"
`;

exports[`vite > ExportNamedDeclaration w/ FunctionExpression > should skip ExportNamedDeclaration w/ FunctionExpression with invalid Component name 1`] = `
"import { $$component as _$$component } from \\"solid-refresh\\";
import { $$refresh as _$$refresh } from \\"solid-refresh\\";
import { $$registry as _$$registry } from \\"solid-refresh\\";
const _REGISTRY = _$$registry();
export const Foo = _$$component(_REGISTRY, \\"_Component$$Foo\\", function Foo() {
  return <h1>Foo</h1>;
});
if (import.meta.hot) {
  _$$refresh({
    type: \\"vite\\",
    hot: import.meta.hot
  }, _REGISTRY);
}"
`;

exports[`vite > ExportNamedDeclaration w/ FunctionExpression > should skip ExportNamedDeclaration w/ FunctionExpression with valid Component name and >1 params 1`] = `
"export function Foo(a, b) {
  return <h1>Foo</h1>;
}"
`;

exports[`vite > ExportNamedDeclaration w/ FunctionExpression > should transform ExportNamedDeclaration w/ FunctionExpression with @refresh granular 1`] = `
"import { $$component as _$$component } from \\"solid-refresh\\";
import { $$refresh as _$$refresh } from \\"solid-refresh\\";
import { $$registry as _$$registry } from \\"solid-refresh\\";
const _REGISTRY = _$$registry();
// @refresh granular
export const Foo = _$$component(_REGISTRY, \\"_Component$$Foo\\", function Foo() {
  return <h1>Foo</h1>;
}, {
  signature: \\"83fbb41\\"
});
if (import.meta.hot) {
  _$$refresh({
    type: \\"vite\\",
    hot: import.meta.hot
  }, _REGISTRY);
}"
`;

exports[`vite > ExportNamedDeclaration w/ FunctionExpression > should transform ExportNamedDeclaration w/ FunctionExpression with @refresh granular 2`] = `
"import { $$component as _$$component } from \\"solid-refresh\\";
import { $$refresh as _$$refresh } from \\"solid-refresh\\";
import { $$registry as _$$registry } from \\"solid-refresh\\";
const _REGISTRY = _$$registry();
// @refresh granular
const example = 'Foo';
export const Foo = _$$component(_REGISTRY, \\"_Component$$Foo\\", function Foo() {
  return <h1>{example}</h1>;
}, {
  signature: \\"c479f38e\\",
  dependencies: [example]
});
if (import.meta.hot) {
  _$$refresh({
    type: \\"vite\\",
    hot: import.meta.hot
  }, _REGISTRY);
}"
`;

exports[`vite > ExportNamedDeclaration w/ FunctionExpression > should transform ExportNamedDeclaration w/ FunctionExpression with @refresh granular 3`] = `
"import { $$component as _$$component } from \\"solid-refresh\\";
import { $$refresh as _$$refresh } from \\"solid-refresh\\";
import { $$registry as _$$registry } from \\"solid-refresh\\";
const _REGISTRY = _$$registry();
// @refresh granular
const Example = createContext();
export const Foo = _$$component(_REGISTRY, \\"_Component$$Foo\\", function Foo() {
  return <Example.Provider>Foo</Example.Provider>;
}, {
  signature: \\"f8fa9630\\",
  dependencies: [Example]
});
if (import.meta.hot) {
  _$$refresh({
    type: \\"vite\\",
    hot: import.meta.hot
  }, _REGISTRY);
}"
`;

exports[`vite > ExportNamedDeclaration w/ FunctionExpression > should transform ExportNamedDeclaration w/ FunctionExpression with valid Component name and params 1`] = `
"import { $$component as _$$component } from \\"solid-refresh\\";
import { $$refresh as _$$refresh } from \\"solid-refresh\\";
import { $$registry as _$$registry } from \\"solid-refresh\\";
const _REGISTRY = _$$registry();
export const Foo = _$$component(_REGISTRY, \\"_Component$$Foo\\", function Foo() {
  return <h1>Foo</h1>;
});
if (import.meta.hot) {
  _$$refresh({
    type: \\"vite\\",
    hot: import.meta.hot
  }, _REGISTRY);
}"
`;

exports[`vite > ExportNamedDeclaration w/ FunctionExpression > should transform ExportNamedDeclaration w/ FunctionExpression with valid Component name and params 2`] = `
"import { $$component as _$$component } from \\"solid-refresh\\";
import { $$refresh as _$$refresh } from \\"solid-refresh\\";
import { $$registry as _$$registry } from \\"solid-refresh\\";
const _REGISTRY = _$$registry();
export const Foo = _$$component(_REGISTRY, \\"_Component$$Foo\\", function Foo(props) {
  return <h1>Foo</h1>;
});
if (import.meta.hot) {
  _$$refresh({
    type: \\"vite\\",
    hot: import.meta.hot
  }, _REGISTRY);
}"
`;

exports[`vite > FunctionDeclaration > should skip FunctionDeclaration with @refresh reload 1`] = `
"// @refresh reload
function Foo() {
  return <h1>Foo</h1>;
}
if (import.meta.hot) {
  import.meta.hot.decline();
}"
`;

exports[`vite > FunctionDeclaration > should skip FunctionDeclaration with @refresh skip 1`] = `
"// @refresh skip
function Foo() {
  return <h1>Foo</h1>;
}"
`;

exports[`vite > FunctionDeclaration > should skip FunctionDeclaration with invalid Component name 1`] = `
"function foo() {
  return <h1>Foo</h1>;
}"
`;

exports[`vite > FunctionDeclaration > should skip FunctionDeclaration with valid Component name and >1 params 1`] = `
"function Foo(a, b) {
  return <h1>Foo</h1>;
}"
`;

exports[`vite > FunctionDeclaration > should transform FunctionDeclaration with @refresh granular 1`] = `
"import { $$component as _$$component } from \\"solid-refresh\\";
import { $$refresh as _$$refresh } from \\"solid-refresh\\";
import { $$registry as _$$registry } from \\"solid-refresh\\";
const _REGISTRY = _$$registry();
// @refresh granular
var Foo = _$$component(_REGISTRY, \\"_Component$$Foo\\", function Foo() {
  return <h1>Foo</h1>;
}, {
  signature: \\"83fbb41\\"
});
if (import.meta.hot) {
  _$$refresh({
    type: \\"vite\\",
    hot: import.meta.hot
  }, _REGISTRY);
}"
`;

exports[`vite > FunctionDeclaration > should transform FunctionDeclaration with @refresh granular 2`] = `
"import { $$component as _$$component } from \\"solid-refresh\\";
import { $$refresh as _$$refresh } from \\"solid-refresh\\";
import { $$registry as _$$registry } from \\"solid-refresh\\";
const _REGISTRY = _$$registry();
// @refresh granular
const example = 'Foo';
var Foo = _$$component(_REGISTRY, \\"_Component$$Foo\\", function Foo() {
  return <h1>{example}</h1>;
}, {
  signature: \\"c479f38e\\",
  dependencies: [example]
});
if (import.meta.hot) {
  _$$refresh({
    type: \\"vite\\",
    hot: import.meta.hot
  }, _REGISTRY);
}"
`;

exports[`vite > FunctionDeclaration > should transform FunctionDeclaration with @refresh granular 3`] = `
"import { $$component as _$$component } from \\"solid-refresh\\";
import { $$refresh as _$$refresh } from \\"solid-refresh\\";
import { $$registry as _$$registry } from \\"solid-refresh\\";
const _REGISTRY = _$$registry();
// @refresh granular
const Example = createContext();
var Foo = _$$component(_REGISTRY, \\"_Component$$Foo\\", function Foo() {
  return <Example.Provider>Foo</Example.Provider>;
}, {
  signature: \\"f8fa9630\\",
  dependencies: [Example]
});
if (import.meta.hot) {
  _$$refresh({
    type: \\"vite\\",
    hot: import.meta.hot
  }, _REGISTRY);
}"
`;

exports[`vite > FunctionDeclaration > should transform FunctionDeclaration with valid Component name and params 1`] = `
"import { $$component as _$$component } from \\"solid-refresh\\";
import { $$refresh as _$$refresh } from \\"solid-refresh\\";
import { $$registry as _$$registry } from \\"solid-refresh\\";
const _REGISTRY = _$$registry();
var Foo = _$$component(_REGISTRY, \\"_Component$$Foo\\", function Foo() {
  return <h1>Foo</h1>;
});
if (import.meta.hot) {
  _$$refresh({
    type: \\"vite\\",
    hot: import.meta.hot
  }, _REGISTRY);
}"
`;

exports[`vite > FunctionDeclaration > should transform FunctionDeclaration with valid Component name and params 2`] = `
"import { $$component as _$$component } from \\"solid-refresh\\";
import { $$refresh as _$$refresh } from \\"solid-refresh\\";
import { $$registry as _$$registry } from \\"solid-refresh\\";
const _REGISTRY = _$$registry();
var Foo = _$$component(_REGISTRY, \\"_Component$$Foo\\", function Foo(props) {
  return <h1>Foo</h1>;
});
if (import.meta.hot) {
  _$$refresh({
    type: \\"vite\\",
    hot: import.meta.hot
  }, _REGISTRY);
}"
`;

exports[`vite > VariableDeclarator > ArrowFunctionExpression > should skip VariableDeclarator w/ ArrowFunctionExpression with @refresh reload 1`] = `
"// @refresh reload
const Foo = () => {
  return <h1>Foo</h1>;
};
if (import.meta.hot) {
  import.meta.hot.decline();
}"
`;

exports[`vite > VariableDeclarator > ArrowFunctionExpression > should skip VariableDeclarator w/ ArrowFunctionExpression with @refresh skip 1`] = `
"// @refresh skip
const Foo = () => {
  return <h1>Foo</h1>;
};"
`;

exports[`vite > VariableDeclarator > ArrowFunctionExpression > should skip VariableDeclarator w/ ArrowFunctionExpression with invalid Component name 1`] = `
"const foo = () => {
  return <h1>Foo</h1>;
};"
`;

exports[`vite > VariableDeclarator > ArrowFunctionExpression > should skip VariableDeclarator w/ ArrowFunctionExpression with valid Component name and >1 params 1`] = `
"const Foo = (a, b) => {
  return <h1>Foo</h1>;
};"
`;

exports[`vite > VariableDeclarator > ArrowFunctionExpression > should transform VariableDeclarator w/ ArrowFunctionExpression with @refresh granular 1`] = `
"import { $$component as _$$component } from \\"solid-refresh\\";
import { $$refresh as _$$refresh } from \\"solid-refresh\\";
import { $$registry as _$$registry } from \\"solid-refresh\\";
const _REGISTRY = _$$registry();
// @refresh granular
const Foo = _$$component(_REGISTRY, \\"_Component$$Foo\\", () => {
  return <h1>Foo</h1>;
}, {
  signature: \\"dd474849\\"
});
if (import.meta.hot) {
  _$$refresh({
    type: \\"vite\\",
    hot: import.meta.hot
  }, _REGISTRY);
}"
`;

exports[`vite > VariableDeclarator > ArrowFunctionExpression > should transform VariableDeclarator w/ ArrowFunctionExpression with @refresh granular 2`] = `
"import { $$component as _$$component } from \\"solid-refresh\\";
import { $$refresh as _$$refresh } from \\"solid-refresh\\";
import { $$registry as _$$registry } from \\"solid-refresh\\";
const _REGISTRY = _$$registry();
// @refresh granular
const example = 'Foo';
const Foo = _$$component(_REGISTRY, \\"_Component$$Foo\\", () => {
  return <h1>{example}</h1>;
}, {
  signature: \\"42ac2326\\",
  dependencies: [example]
});
if (import.meta.hot) {
  _$$refresh({
    type: \\"vite\\",
    hot: import.meta.hot
  }, _REGISTRY);
}"
`;

exports[`vite > VariableDeclarator > ArrowFunctionExpression > should transform VariableDeclarator w/ ArrowFunctionExpression with @refresh granular 3`] = `
"import { $$component as _$$component } from \\"solid-refresh\\";
import { $$refresh as _$$refresh } from \\"solid-refresh\\";
import { $$registry as _$$registry } from \\"solid-refresh\\";
const _REGISTRY = _$$registry();
// @refresh granular
const Example = createContext();
const Foo = _$$component(_REGISTRY, \\"_Component$$Foo\\", () => {
  return <Example.Provider>Foo</Example.Provider>;
}, {
  signature: \\"23378462\\",
  dependencies: [Example]
});
if (import.meta.hot) {
  _$$refresh({
    type: \\"vite\\",
    hot: import.meta.hot
  }, _REGISTRY);
}"
`;

exports[`vite > VariableDeclarator > ArrowFunctionExpression > should transform VariableDeclarator w/ ArrowFunctionExpression with valid Component name and params 1`] = `
"import { $$component as _$$component } from \\"solid-refresh\\";
import { $$refresh as _$$refresh } from \\"solid-refresh\\";
import { $$registry as _$$registry } from \\"solid-refresh\\";
const _REGISTRY = _$$registry();
const Foo = _$$component(_REGISTRY, \\"_Component$$Foo\\", () => {
  return <h1>Foo</h1>;
});
if (import.meta.hot) {
  _$$refresh({
    type: \\"vite\\",
    hot: import.meta.hot
  }, _REGISTRY);
}"
`;

exports[`vite > VariableDeclarator > ArrowFunctionExpression > should transform VariableDeclarator w/ ArrowFunctionExpression with valid Component name and params 2`] = `
"import { $$component as _$$component } from \\"solid-refresh\\";
import { $$refresh as _$$refresh } from \\"solid-refresh\\";
import { $$registry as _$$registry } from \\"solid-refresh\\";
const _REGISTRY = _$$registry();
const Foo = _$$component(_REGISTRY, \\"_Component$$Foo\\", props => {
  return <h1>Foo</h1>;
});
if (import.meta.hot) {
  _$$refresh({
    type: \\"vite\\",
    hot: import.meta.hot
  }, _REGISTRY);
}"
`;

exports[`vite > VariableDeclarator > FunctionExpression > should skip VariableDeclarator w/ FunctionExpression with @refresh reload 1`] = `
"// @refresh reload
const Foo = function () {
  return <h1>Foo</h1>;
};
if (import.meta.hot) {
  import.meta.hot.decline();
}"
`;

exports[`vite > VariableDeclarator > FunctionExpression > should skip VariableDeclarator w/ FunctionExpression with @refresh skip 1`] = `
"// @refresh skip
const Foo = function () {
  return <h1>Foo</h1>;
};"
`;

exports[`vite > VariableDeclarator > FunctionExpression > should skip VariableDeclarator w/ FunctionExpression with invalid Component name 1`] = `
"const foo = function () {
  return <h1>Foo</h1>;
};"
`;

exports[`vite > VariableDeclarator > FunctionExpression > should skip VariableDeclarator w/ FunctionExpression with valid Component name and >1 params 1`] = `
"const Foo = function (a, b) {
  return <h1>Foo</h1>;
};"
`;

exports[`vite > VariableDeclarator > FunctionExpression > should transform VariableDeclarator w/ FunctionExpression with @refresh granular 1`] = `
"import { $$component as _$$component } from \\"solid-refresh\\";
import { $$refresh as _$$refresh } from \\"solid-refresh\\";
import { $$registry as _$$registry } from \\"solid-refresh\\";
const _REGISTRY = _$$registry();
// @refresh granular
const Foo = _$$component(_REGISTRY, \\"_Component$$Foo\\", function () {
  return <h1>Foo</h1>;
}, {
  signature: \\"a8bc6ac4\\"
});
if (import.meta.hot) {
  _$$refresh({
    type: \\"vite\\",
    hot: import.meta.hot
  }, _REGISTRY);
}"
`;

exports[`vite > VariableDeclarator > FunctionExpression > should transform VariableDeclarator w/ FunctionExpression with @refresh granular 2`] = `
"import { $$component as _$$component } from \\"solid-refresh\\";
import { $$refresh as _$$refresh } from \\"solid-refresh\\";
import { $$registry as _$$registry } from \\"solid-refresh\\";
const _REGISTRY = _$$registry();
// @refresh granular
const example = 'Foo';
const Foo = _$$component(_REGISTRY, \\"_Component$$Foo\\", function () {
  return <h1>{example}</h1>;
}, {
  signature: \\"2264ba41\\",
  dependencies: [example]
});
if (import.meta.hot) {
  _$$refresh({
    type: \\"vite\\",
    hot: import.meta.hot
  }, _REGISTRY);
}"
`;

exports[`vite > VariableDeclarator > FunctionExpression > should transform VariableDeclarator w/ FunctionExpression with @refresh granular 3`] = `
"import { $$component as _$$component } from \\"solid-refresh\\";
import { $$refresh as _$$refresh } from \\"solid-refresh\\";
import { $$registry as _$$registry } from \\"solid-refresh\\";
const _REGISTRY = _$$registry();
// @refresh granular
const Example = createContext();
const Foo = _$$component(_REGISTRY, \\"_Component$$Foo\\", function () {
  return <Example.Provider>Foo</Example.Provider>;
}, {
  signature: \\"b3df1897\\",
  dependencies: [Example]
});
if (import.meta.hot) {
  _$$refresh({
    type: \\"vite\\",
    hot: import.meta.hot
  }, _REGISTRY);
}"
`;

exports[`vite > VariableDeclarator > FunctionExpression > should transform VariableDeclarator w/ FunctionExpression with valid Component name and params 1`] = `
"import { $$component as _$$component } from \\"solid-refresh\\";
import { $$refresh as _$$refresh } from \\"solid-refresh\\";
import { $$registry as _$$registry } from \\"solid-refresh\\";
const _REGISTRY = _$$registry();
const Foo = _$$component(_REGISTRY, \\"_Component$$Foo\\", function () {
  return <h1>Foo</h1>;
});
if (import.meta.hot) {
  _$$refresh({
    type: \\"vite\\",
    hot: import.meta.hot
  }, _REGISTRY);
}"
`;

exports[`vite > VariableDeclarator > FunctionExpression > should transform VariableDeclarator w/ FunctionExpression with valid Component name and params 2`] = `
"import { $$component as _$$component } from \\"solid-refresh\\";
import { $$refresh as _$$refresh } from \\"solid-refresh\\";
import { $$registry as _$$registry } from \\"solid-refresh\\";
const _REGISTRY = _$$registry();
const Foo = _$$component(_REGISTRY, \\"_Component$$Foo\\", function (props) {
  return <h1>Foo</h1>;
});
if (import.meta.hot) {
  _$$refresh({
    type: \\"vite\\",
    hot: import.meta.hot
  }, _REGISTRY);
}"
`;

exports[`vite > fix render > import specifiers > should work with ImportNamespaceSpecifier 1`] = `
"import * as solidWeb from 'solid-js/web';
const _cleanup = solidWeb.render(() => <App />, root);
if (import.meta.hot) import.meta.hot.dispose(_cleanup);"
`;

exports[`vite > fix render > import specifiers > should work with ImportSpecifier + Identifier 1`] = `
"import { render } from 'solid-js/web';
const _cleanup = render(() => <App />, root);
if (import.meta.hot) import.meta.hot.dispose(_cleanup);"
`;

exports[`vite > fix render > import specifiers > should work with ImportSpecifier + aliased Identifier 1`] = `
"import { render as Render } from 'solid-js/web';
const _cleanup = Render(() => <App />, root);
if (import.meta.hot) import.meta.hot.dispose(_cleanup);"
`;

exports[`vite > fix render > import specifiers > should work with ImportSpecifier + aliased Identifier from StringLiteral 1`] = `
"import { 'render' as Render } from 'solid-js/web';
const _cleanup = Render(() => <App />, root);
if (import.meta.hot) import.meta.hot.dispose(_cleanup);"
`;

exports[`vite > fix render > top-level statements > should work with IfStatement 1`] = `
"import { render } from 'solid-js/web';
if (root) {
  const _cleanup = render(() => <App />, root);
  if (import.meta.hot) import.meta.hot.dispose(_cleanup);
}"
`;

exports[`vite > should support Context API 1`] = `
"import { $$context as _$$context } from \\"solid-refresh\\";
import { $$refresh as _$$refresh } from \\"solid-refresh\\";
import { $$registry as _$$registry } from \\"solid-refresh\\";
const _REGISTRY = _$$registry();
import { createContext } from 'solid-js';
const Example = _$$context(_REGISTRY, \\"_Context$$Example\\", createContext());
if (import.meta.hot) {
  _$$refresh({
    type: \\"vite\\",
    hot: import.meta.hot
  }, _REGISTRY);
}"
`;
